plugins {
    id 'java'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'org.springframework.boot' version '2.6.4'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'org.springframework.boot.experimental.thin-launcher' version '1.0.28.RELEASE'
    id 'com.diffplug.spotless' version '6.3.0'
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

group = 'com.example'
version = '1.0'

repositories {
    mavenCentral()
}

dependencies {

    // Spring cloud function dependency version
    implementation platform("org.springframework.cloud:spring-cloud-function-dependencies:${springCloudFunctionVersion}")

    // This dependency is used to test functions locally by exposing them as web endpoint.
    implementation 'org.springframework.cloud:spring-cloud-starter-function-web'

    // This dependency is needed when trying to deploy this on AWS lambda
    implementation 'org.springframework.cloud:spring-cloud-function-adapter-aws'

    // For nullability contract
    implementation 'org.jetbrains:annotations:23.0.0'

    // AWS dependencies to handle lambda events
    implementation 'com.amazonaws:aws-lambda-java-core:1.2.1'
    implementation 'com.amazonaws:aws-lambda-java-events:3.11.0'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
    useJUnitPlatform()
}

assemble.dependsOn = [shadowJar, thinJar]

jar {
    manifest {
        attributes 'Main-Class': 'com.example.Application'
    }
}

import com.github.jengelman.gradle.plugins.shadow.transformers.PropertiesFileTransformer

shadowJar {
    archiveClassifier.set('aws')
    dependencies {
        exclude(dependency("org.springframework.cloud:spring-cloud-function-web:.*"))
    }
    // Required for Spring
    mergeServiceFiles()
    append 'META-INF/spring.handlers'
    append 'META-INF/spring.schemas'
    append 'META-INF/spring.tooling'
    transform(PropertiesFileTransformer) {
        paths = ['META-INF/spring.factories']
        mergeStrategy = "append"
    }
}

spotless {
    java {
        target 'src/*/java/**/*.java'
        googleJavaFormat()
    }
}
